if !isdirectory(expand('~/.vim/undo'))
  call mkdir(expand('~/.vim/undo'), 'p')
endif

let mapleader = " "
set clipboard=unnamedplus,unnamed
set cursorline
set encoding=utf-8
set hidden
set hlsearch
set ignorecase
set incsearch
set mouse=a
set nobackup
set noswapfile
set nowrap
set nowritebackup
set path+=**
set rnu nu
set signcolumn=yes
set smartcase
set smartindent
set so=20
set splitbelow
set splitright
set undodir=~/.vim/undo "make this folder first
set undofile
set updatetime=300
set wildignore+=*.pyc
set wildmenu
set confirm

" ':verbose imap <tab>' check key
inoremap jk <Esc>
nnoremap c* viW"zy/\V<C-r>=escape(@z, '/\')<CR><CR>``cgn
nnoremap c# viW"zy?\V<C-r>=escape(@z, '/\')<CR><CR>``cgn
nnoremap j gj
nnoremap k gk
nnoremap n nzz
nnoremap N Nzz
nnoremap ]w <C-w>w
nnoremap [w <C-w>W
nnoremap Y y$
nnoremap U <C-r>
nnoremap ; :
vnoremap ; :
nnoremap : ;
nnoremap ' `
nnoremap ` '
nnoremap Q @q
vnoremap Q :norm @q<cr>

function! QuitOrBdelete()
    let l:buffer_count = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    if l:buffer_count > 1
        Bdelete
    else
        quit
    endif
endfunction
nnoremap <leader>q :call QuitOrBdelete()<CR>
nnoremap <leader><leader> <c-^>

nnoremap <leader>/ :BLines<cr>
nnoremap <leader>fc :History:<Cr>
nnoremap <leader>fd :Buffers<Cr>
nnoremap <leader>ff :Files<Cr>
nnoremap <leader>fg :Rg<Cr>
nnoremap <leader>fl :Files %:h<Cr>
nnoremap <leader>fm :History<Cr>
nnoremap <leader>fn :edit ~/.vim/vimrc<cr>
nnoremap <leader>gf :GFiles<Cr>

nnoremap <Cr> o<ESC>
nnoremap H ^
nnoremap L $
nnoremap c "_c
nnoremap C "_C
nnoremap x "_x
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap / ms/
nnoremap ? ms?
nnoremap p p=`]
nnoremap P :put! "0=`]<cr>
nnoremap <leader>b :ls<CR>:b<Space>
" Set 0 as ^
nnoremap <expr> <silent> 0 col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
nnoremap <Up> <C-u>zz<CR>
nnoremap <Down> <C-d>zz<CR>
nnoremap <S-Up> <Up>
nnoremap <S-Down> <Down>
nnoremap <Left> :bp<cr>
nnoremap <Right> :bn<cr>
xnoremap < <gv
xnoremap > >gv
" gJ and J to join
" nnoremap <silent> J :<C-U>exec "exec 'norm m`' \| move +" . (0+v:count1)<CR>==``
" nnoremap <silent> K :<C-U>exec "exec 'norm m`' \| move -" . (1+v:count1)<CR>==``
xnoremap <silent> J :<C-U>exec "'<,'>move '>+" . (0+v:count1)<CR>gv=gv
xnoremap <silent> K :<C-U>exec "'<,'>move '<-" . (1+v:count1)<CR>gv=gv


call plug#begin('~/.vim/plugged')

Plug 'catppuccin/vim'
Plug 'christoomey/vim-sort-motion'
Plug 'christoomey/vim-titlecase'
Plug 'diepm/vim-rest-console'
Plug 'haya14busa/vim-asterisk'
Plug 'inkarkat/vim-ReplaceWithRegister'
Plug 'jpalardy/vim-slime'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-user'
Plug 'machakann/vim-highlightedyank'
Plug 'markonm/traces.vim'
Plug 'mbbill/undotree'
Plug 'michaeljsmith/vim-indent-object'
Plug 'moll/vim-bbye'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ntpeters/vim-better-whitespace'
Plug 'preservim/nerdtree'
Plug 'rhysd/clever-f.vim'
Plug 'romainl/vim-cool'
Plug 'romainl/vim-qf'
Plug 'rstacruz/vim-closer'
Plug 'saaguero/vim-textobj-pastedtext'
Plug 'sheerun/vim-polyglot'
Plug 'svban/YankAssassin.vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'wellle/targets.vim'

call plug#end()

" Qflist settings
let g:qf_mapping_ack_style = 1

" Undo mapping
nnoremap <leader>u :UndotreeToggle<cr>
if !exists('g:undotree_DiffAutoOpen')
    let g:undotree_DiffAutoOpen = 0
endif

" Clipboard
augroup Osc52Yank
    autocmd!
    autocmd TextYankPost * if len(v:event.regcontents[0]) > 1 || len(v:event.regcontents) > 1 | call system("printf $'\\e]52;c;%s\\a' \"$(cat | base64)\" >> /dev/tty", v:event.regcontents) | endif
augroup END

" Vim-slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "1"}
let g:slime_dont_ask_default = 1

" Vim-rest
let g:vrc_split_request_body = 1

" vim-asterisk
let g:asterisk#keeppos = 1
map *  <Plug>(asterisk-z*)
map #  <Plug>(asterisk-z#)
map g* <Plug>(asterisk-gz*)
map g# <Plug>(asterisk-gz#)

" Fzf
let g:fzf_vim = {}
" CTRL-A CTRL-Q to select all and build quickfix list
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction

let g:fzf_action = {
  \ 'ctrl-q': function('s:build_quickfix_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all,ctrl-j:down,ctrl-k:up,right:preview-page-down,left:preview-page-up'
let g:fzf_vim.preview_window = ['right,60%', 'ctrl-/']
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }

" Replace with register
nmap <Leader>r  <Plug>ReplaceWithRegisterOperator
nmap <Leader>rr <Plug>ReplaceWithRegisterLine
xmap <Leader>r  <Plug>ReplaceWithRegisterVisual

" Nerdtree
" let g:NERDTreeMapPreview = 'p'
nnoremap <leader>et :NERDTreeToggle<CR>

" Theme, highlight, smartf
set termguicolors
color catppuccin_mocha
let g:cool_total_matches = 1
let g:highlightedyank_highlight_duration = 300
let g:clever_f_smart_case = 1

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
let g:airline_symbols.colnr = ':'
au User AirlineAfterInit  :let g:airline_section_z = airline#section#create(['%3p%%  ','linenr','colnr'])

" Autosave
autocmd FocusLost * wa
" autocmd CursorHold * wa

" Coc settings
" let g:coc_global_extensions = ['coc-json', '@yaegassy/coc-ansible', 'coc-sh', 'coc-pyright']
" let g:coc_start_at_startup = 1
" let g:coc_suggest_disable = 1
let g:coc_filetype_map = {'yaml.ansible': 'ansible'}
let g:coc_disable_startup_warning = 1
call coc#config('suggest.triggerAfterInsertEnter', v:false)
call coc#config('suggest.minTriggerInputLength', 4)

inoremap <silent><expr> <C-Space> coc#refresh()
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-@> coc#refresh()
nnoremap <silent> K :call ShowDocumentation()<CR>
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" autocmd CursorHold * silent call CocActionAsync('highlight')

" Map function and class text objects
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')
" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')
" Add (Neo)Vim's native statusline support
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

